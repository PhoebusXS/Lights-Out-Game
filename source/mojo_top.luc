module mojo_top (
    input clk,
    input rst_n, // reset button (active low)
    output pina[12], // for led matrix
    output pinb[12], // for led matrix
    input pinc[4], // for keypad, 4 pins on the left
    output pind[4], // for keypad, 4 pins on the right
    output led[8]
) {
    sig mask[12][12];
    sig rst;
    sig game_possibilties[3][12];
    sig hint_possibilties[3][12];

    board_updater my_updater;
    led_matrix_controller my_led;
    keypad_controller my_keypad;

    .clk(clk) {
        reset_conditioner reset_cond;
        edge_detector edge_detector_a(#RISE(1), #FALL(0)); // detect rising edges
        edge_detector edge_detector_b(#RISE(1), #FALL(0)); // detect rising edges
        edge_detector edge_detector_c(#RISE(1), #FALL(0)); // detect rising edges
        edge_detector edge_detector_d(#RISE(1), #FALL(0)); // detect rising edges
        button_conditioner button_cond_a;
        button_conditioner button_cond_b;
        button_conditioner button_cond_c;
        button_conditioner button_cond_d;

        .rst(rst) {
            fsm state = {INIT, PLAY, FIN, LOSE};
            counter ctr (#SIZE(6),#TOP(63),#DIV(12));
            counter ktr (#SIZE(2), #DIV(23));
            dff game[12](.clk(clk), .rst(rst));
            dff hint[12](.clk(clk), .rst(rst));
            dff move[8](.clk(clk), .rst(rst));
            dff step[6](.clk(clk), .rst(rst));
            dff init_game[12](.clk(clk), .rst(rst));
            dff init_hint[12](.clk(clk), .rst(rst));
            dff showing_hint[1](.clk(clk), .rst(rst));
            dff step_normalizer(.clk(clk), .rst(rst));
        }
    }

    always {
        led[0] = my_keypad.show_hint;
    
        led[1] = showing_hint.q;
        led[7:2] = my_keypad.move[5:0];
    
        reset_cond.in = ~rst_n; // input raw inverted reset signal
        rst = reset_cond.out;   // conditioned reset
 
        // initial game and hint set
        game_possibilties[0] = 12b010011111110;
        game_possibilties[1] = 12b110010000001;
        game_possibilties[2] = 12b101000100111;
 
        hint_possibilties[0] = 12b100110111110;
        hint_possibilties[1] = 12b011001010011;
        hint_possibilties[2] = 12b101100101110;

        init_game.d = 12b010011111110;
        init_hint.d = 12b100110111110;

        mask[0] = 12b110010000000;
        mask[1] = 12b111001000000;
        mask[2] = 12b011100100000;
        mask[3] = 12b001100010000;
        mask[4] = 12b100011001000;
        mask[5] = 12b010011100100;
        mask[6] = 12b001001110010;
        mask[7] = 12b000100110001;
        mask[8] = 12b000010001100;
        mask[9] = 12b000001001110;
        mask[10] = 12b000000100111;
        mask[11] = 12b000000010011;

        my_updater.mask = mask;
        my_updater.hint = hint.q;
        my_updater.move = move.q;
        my_updater.game = game.q;
        pina = 0;
        pinb = 0;
        pind = 0;

        // update my_keypad
        button_cond_a.in = pinc[0];
        button_cond_b.in = pinc[1];
        button_cond_c.in = pinc[2];
        button_cond_d.in = pinc[3];
        edge_detector_a.in = button_cond_a.out;
        edge_detector_b.in = button_cond_b.out;
        edge_detector_c.in = button_cond_c.out;
        edge_detector_d.in = button_cond_d.out;
        my_keypad.pin = c{edge_detector_d.out, edge_detector_c.out, edge_detector_b.out, edge_detector_a.out};
        my_keypad.ind = ktr.value;
        pind = my_keypad.pinr;

        // update my_led
        my_led.game[2] = game.q[11:8];
        my_led.game[1] = game.q[7:4];
        my_led.game[0] = game.q[3:0];
        my_led.hint[2] = hint.q[11:8];
        my_led.hint[1] = hint.q[7:4];
        my_led.hint[0] = hint.q[3:0];
        my_led.step = step.q;
        my_led.ind = ctr.value;
        my_led.smile = 0;
        my_led.sad = 0;
        my_led.show_hint = showing_hint.q;

        case (state.q) {

            state.INIT:
                game.d = init_game.q;
                hint.d = init_hint.q;
                move.d = 42;
                step.d = 0;
                my_led.show_hint = 0;
                showing_hint.d = 0;
                step_normalizer.d = 0;

                if (my_keypad.move != 42) {
                    state.d = state.PLAY;
                }

            state.PLAY:

                // incrementing step number
                if (move.q != my_keypad.move) {
                    step_normalizer.d = step_normalizer.q + 1;
                    if (step_normalizer.q - step_normalizer.q / 2 * 2 == 1) {
                        step.d = step.q + 1;
                    }
                }

                move.d = my_keypad.move;
                game.d = my_updater.new_game;
                hint.d = my_updater.new_hint;

                // display all the stuff
                pina = my_led.pina;
                pinb = my_led.pinb;

                // see if game is solved
                if (game.q == 0) {
                    state.d = state.FIN;
                }

                // see if all the moves are used up
                if (step.q > 40) {
                    state.d = state.LOSE;
                }

                // see if player gave up
                if (my_keypad.restart_game == 1) {
                    state.d = state.INIT;
                }

                // see if player wants hint
                if (my_keypad.show_hint == 1) {
                    if (showing_hint.q == 1) {
                        my_led.show_hint = 0;
                        showing_hint.d = 0;
                        step.d = step.q + 4;
                    } else {
                        my_led.show_hint = 1;
                        showing_hint.d = 1;
                    }
                }

            state.FIN:
                // display smile face
                my_led.smile = 1 ;

                // waiting for restart
                if (my_keypad.move != 42) {
                   state.d = state.INIT;
                }

            state.LOSE:

                // display sad face
                my_led.sad = 1 ;

                // waiting for restart
                if (my_keypad.move != 42) {
                   state.d = state.INIT;
                }

        }

        pina = my_led.pina;
        pinb = my_led.pinb;

    }

 
}

module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    //output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    //output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    //edge_detector edge_detector (#RISE(1), #FALL(0));
    
    .rst(rst) {
      multi_seven_seg seg;
    //  counter ctr (#SIZE(4), #TOP(9), #DIV(24)); // size - how wide the counter is. 2^number
                                        // div - how many bits use to divide the clock. every 2^24 cycles counter will increase
                                        // top - ctr will count from 0 to 9
      }
  }
  
  //decoder num_to_seg (#WIDTH(3)); // use to test all the segments
  //decoder num_to_digit (#WIDTH(2));
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    
    led = c{3b0, io_button};  // connect buttons to LEDs
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
    
    seg.values = {4h8,4h5,4h3,4h1};
    
    //seg.char = ctr.value;
    
    io_seg = ~seg.seg;
    io_seg = ~seg.sel;
    
    
    
    //num_to_seg.in = ctr.value;
    
    
    //io_seg = ~num_to_seg.out; // connect segments to counter
    //io_sel = 4h0;             // 0 will select all digits, 4h1 if only one display
    
    //num_to_seg.in = ctr.value[2:0];   // lower three bits used for segments
    //num_to_digit.in = ctr.value[4:3]; // upper two bits used for digits
 
    //io_seg = ~num_to_seg.out;   // connect segments to counter
    //io_sel = ~num_to_digit.out; // connect digit select to counter
    
  }    
}